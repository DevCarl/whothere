install.packages("MuMIn")
library(MuMIn)
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
#create the query
query <-"SELECT W.`Room_Room_id` as Room, W.`Date`, HOUR( W.Time ) as Time, T.`Module_Module_code` as Module, M.`Course_Level`,T.`Tutorial`, T.`Double_module`, T.`Class_went_ahead`, R.`Capacity`, G.`Percentage_room_full`, AVG(W.`Associated_client_counts`) as Wifi_Average_clients, MAX(W.`Authenticated_client_counts`) as Wifi_Max_clients FROM Room R, Wifi_log W, Ground_truth_data G, Time_table T, Module M WHERE W.Room_Room_id = R.Room_id AND G.Room_Room_id = W.Room_Room_id AND W.Date = G.Date AND HOUR( W.Time ) = HOUR( G.Time ) AND HOUR( W.Time ) = HOUR( T.Time_period ) AND T.Date = W.Date AND T.Room_Room_id = W.Room_Room_id AND M.`Module_code` = T.`Module_Module_code` GROUP BY W.Room_Room_id, HOUR( W.Time ) , W.Date"
#select the data based on the query and store them in a dataframe called Analysis table
AnalysisTable <-dbGetQuery(connection, query)
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
library(RMySQL) #package for communicate with MySQL database
library(ggplot2) #package for making graphs
library(GGally)
library(nlme)
library(caret) # for splitting the database
library(DAAG)#for k-fold validation on linear and logistic
library(boot)#for k-fold validation on glm
library(MuMIn)
source("http://peterhaschke.com/Code/multiplot.R") #for using
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
query <-"SELECT W.`Room_Room_id` as Room, W.`Date`, HOUR( W.Time ) as Time, T.`Module_Module_code` as Module, M.`Course_Level`,T.`Tutorial`, T.`Double_module`, T.`Class_went_ahead`, R.`Capacity`, G.`Percentage_room_full`, AVG(W.`Associated_client_counts`) as Wifi_Average_clients, MAX(W.`Authenticated_client_counts`) as Wifi_Max_clients FROM Room R, Wifi_log W, Ground_truth_data G, Time_table T, Module M WHERE W.Room_Room_id = R.Room_id AND G.Room_Room_id = W.Room_Room_id AND W.Date = G.Date AND HOUR( W.Time ) = HOUR( G.Time ) AND HOUR( W.Time ) = HOUR( T.Time_period ) AND T.Date = W.Date AND T.Room_Room_id = W.Room_Room_id AND M.`Module_code` = T.`Module_Module_code` GROUP BY W.Room_Room_id, HOUR( W.Time ) , W.Date"
AnalysisTable <-dbGetQuery(connection, query)
query <-"SELECT W.`Room_Room_id` as Room, W.`Date`, HOUR( W.Time ) as Time, T.`Module_Module_code` as Module, M.`Course_Level`,T.`Tutorial`, T.`Double_module`, T.`Class_went_ahead`, R.`Capacity`, G.`Percentage_room_full`, AVG(W.`Associated_client_counts`) as Wifi_Average_logs, MAX(W.`Authenticated_client_counts`) as Wifi_Max_logs FROM Room R, Wifi_log W, Ground_truth_data G, Time_table T, Module M WHERE W.Room_Room_id = R.Room_id AND G.Room_Room_id = W.Room_Room_id AND W.Date = G.Date AND HOUR( W.Time ) = HOUR( G.Time ) AND HOUR( W.Time ) = HOUR( T.Time_period ) AND T.Date = W.Date AND T.Room_Room_id = W.Room_Room_id AND M.`Module_code` = T.`Module_Module_code` GROUP BY W.Room_Room_id, HOUR( W.Time ) , W.Date"
AnalysisTable <-dbGetQuery(connection, query)
AnalysisTable$Survey_occupancy <- AnalysisTable$Capacity * AnalysisTable$Percentage_room_full
AnalysisTable$Factor_Time <-cut(AnalysisTable$Time, breaks = 4, right=FALSE, labels=c('Early Morning','Late Morning','Early Afternoon','Late Afternoon' ))
#get general information on the dataset, head, tail and type of variables
AnalysisTable$Room <- factor(AnalysisTable$Room)
AnalysisTable$Course_Level <- factor(AnalysisTable$Course_Level)
AnalysisTable$Tutorial <- factor(AnalysisTable$Tutorial)
AnalysisTable$Double_module <- factor(AnalysisTable$Double_module)
AnalysisTable$Class_went_ahead <- factor(AnalysisTable$Class_went_ahead)
histo1 <- ggplot(AnalysisTable, aes(x = Wifi_Max_logs)) + geom_histogram(binwidth = 10,  col="red", aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red") +theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#histogram for showing the count in each bin for the Average number of clients
histo2 <- ggplot(AnalysisTable, aes(x = Wifi_Average_logs)) + geom_histogram(binwidth = 10,  col="red", aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red") +theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#histogram for showing the count in each bin for the number of clients counted with the survey
histo3 <- ggplot(AnalysisTable, aes(x = Survey_occupancy)) + geom_histogram(binwidth = 10,  col="red", aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red") +theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#histogram for showing the count in each bin for each hour of the day
histo4 <- ggplot(AnalysisTable, aes(x = Time)) + geom_histogram(binwidth = 2,  col="red", aes(fill=..count..)) + scale_fill_gradient("Count", low = "yellow", high = "red") +theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
multiplot(histo1, histo2, histo3, histo4, cols=2)
box1 <- ggplot(AnalysisTable, aes(x = factor(0), y = Survey_occupancy)) + geom_boxplot() + xlab("Counted clients") + ylab("")+ scale_x_discrete(breaks = NULL) + theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#box plot for the counted clients variable
box2 <- ggplot(AnalysisTable, aes(x = factor(0), y = Wifi_Average_logs)) + geom_boxplot() + xlab("Average counted clients") + ylab("")+ scale_x_discrete(breaks = NULL)  + theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#box plot for the maximum number of clients variable
box3 <- ggplot(AnalysisTable, aes(x = factor(0), y =Wifi_Max_logs)) + geom_boxplot() + xlab("Maximum counted clients") + ylab("")+ scale_x_discrete(breaks = NULL) + theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#box plot for the Time continuous variable
box4 <- ggplot(AnalysisTable, aes(x = factor(0), y = Time)) + geom_boxplot() + xlab("Time") + ylab("")+ scale_x_discrete(breaks = NULL) + theme_bw()+theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
multiplot(box1, box2, box3, box4, cols=2)
my_fn <- function(data, mapping, ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=lm, fill="orangered3", color="orangered3", ...)
p
}
ggpairs(AnalysisTable, columns = c('Survey_occupancy','Wifi_Max_logs', 'Wifi_Average_logs', 'Time'), lower = list(continuous = my_fn)) + theme_bw()
pairbox1 <- ggplot(AnalysisTable, aes(x = Room, y = Survey_occupancy)) + geom_boxplot() + theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Box plot for exploring relationship between Room and time as a factor
pairbox2 <- ggplot(AnalysisTable, aes(x = Factor_Time, y =Survey_occupancy)) + geom_boxplot() + theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Box plot for exploring relationship between Room and course level
pairbox3 <- ggplot(AnalysisTable, aes(x = Course_Level, y =Survey_occupancy)) + geom_boxplot()+  theme_bw()+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
multiplot(pairbox1, pairbox2, pairbox3, cols=2)
?regsubset
?regsubsets
AnalysisTable <- read.csv("C:/Users/Cometa/Desktop/ResearchPracticum/repo/whothere/dataAnalysis/AnalysisTable.csv")
View(AnalysisTable)
AnalysisTable <- read.csv("C:/Users/Cometa/Desktop/ResearchPracticum/repo/whothere/dataAnalysis/AnalysisTable.csv")
View(AnalysisTable)
library(RMySQL) #package for communicate with MySQL database
library(ggplot2) #package for making graphs
source("http://peterhaschke.com/Code/multiplot.R")#package for plot the graphs
AnalysisTable$Survey_occupancy <- AnalysisTable$Capacity * AnalysisTable$Percentage_room_full
AnalysisTable$Factor_Time <-cut(AnalysisTable$Time, breaks = 4, right=FALSE, labels=c('Early Morning','Late Morning','Early Afternoon','Late Afternoon' ))
AnalysisTable$Course_Level <- factor(AnalysisTable$Course_Level)
occupancy.lm.max = lm(Survey_occupancy ~ Wifi_Max_logs + Room + Factor_Time + Course_Level + Course_Level *Wifi_Max_logs + Factor_Time * Course_Level, data=train)
smp_size <- floor(0.60 * nrow(AnalysisTable))
## set the seed to make your partition reproductible
set.seed(123)
#select the 60% of the dataset
train_ind <- sample(seq_len(nrow(AnalysisTable)), size = smp_size)
#creating the training set with the 60% of the observation selected before
train <-AnalysisTable[train_ind, ]
#creating the test set with rest of the obervation - 60%
test <- AnalysisTable[-train_ind, ]
occupancy.lm.max = lm(Survey_occupancy ~ Wifi_Max_logs + Room + Factor_Time + Course_Level + Course_Level *Wifi_Max_logs + Factor_Time * Course_Level, data=train)
RMSE.avg <- function(predicted, true) mean((predicted-true)^2)^.5
RMSE(predict(occupancy.lm.avg, test), test$Counted_client)
RMSE.avg(predict(occupancy.lm.avg, test), test$Counted_client)
RMSE.avg(predict(occupancy.lm.max, test), test$Counted_client)
RMSE.avg <- function(predicted, true) mean((predicted-true)^2)^.5
occupancy.lm.max = lm(Survey_occupancy ~ Wifi_Max_logs + Room + Factor_Time + Course_Level + Course_Level *Wifi_Max_logs + Factor_Time * Course_Level, data=train)
RMSE.avg <- function(predicted, true) mean((predicted-true)^2)^.5
RMSE <- function(predicted, true) mean((predicted-true)^2)^.5
RMSE.avg<- RMSE(predict(occupancy.lm.max, test), test$Survey_occupancy)
RMSE <- function(predicted, true) mean((predicted-true)^2)^.5
RMSE.avg<- RMSE(predict(occupancy.lm.max, test), test$Survey_occupancy)
RMSE.avg
RMSE.avg<- RMSE(predict(occupancy.lm.avg, test), test$Survey_occupancy)
occupancy.lm.avg = lm(Survey_occupancy ~ Wifi_Average_logs + Room + Factor_Time + Course_Level + Course_Level * Wifi_Average_logs + Factor_Time * Course_Level, data=train)
RMSE.avg<- RMSE(predict(occupancy.lm.avg, test), test$Survey_occupancy)
occupancy.lm.avg = lm(Survey_occupancy ~ Wifi_Average_logs + Room + Factor_Time + Course_Level + Course_Level * Wifi_Average_logs + Factor_Time * Course_Level, data=train)
RMSE.avg<- RMSE(predict(occupancy.lm.avg, test), test$Survey_occupancy)
RMSE.avg
occupancy.lm.final <- lm(Survey_occupancy ~ Wifi_Average_logs + Room + Factor_Time + Course_Level + Course_Level * Wifi_Average_logs + Factor_Time * Course_Level, data=AnalysisTable)
summary(occupancy.lm.final)
library(ggfortify)
class(autoplot(occupancy.lm.final))
autoplot(occupancy.lm.final, smooth.colour = 'orangered') + theme_bw()
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
query <-"SELECT W.`Room_Room_id` as Room, W.`Date`, HOUR( W.Time ) as Time, T.`Module_Module_code` as Module, M.`Course_Level`,T.`Tutorial`, T.`Double_module`, T.`Class_went_ahead`, R.`Capacity`, G.`Percentage_room_full`, AVG(W.`Associated_client_counts`) as Wifi_Average_clients, MAX(W.`Authenticated_client_counts`) as Wifi_Max_clients FROM Room R, Wifi_log W, Ground_truth_data G, Time_table T, Module M WHERE W.Room_Room_id = R.Room_id AND G.Room_Room_id = W.Room_Room_id AND W.Date = G.Date AND HOUR( W.Time ) = HOUR( G.Time ) AND HOUR( W.Time ) = HOUR( T.Time_period ) AND T.Date = W.Date AND T.Room_Room_id = W.Room_Room_id AND M.`Module_code` = T.`Module_Module_code` GROUP BY W.Room_Room_id, HOUR( W.Time ) , W.Date"
AnalysisTable <-dbGetQuery(connection, query)
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full <= 0] <- "0"
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full>0] <- "1"
AnalysisTable$Binary_Occupancy <- factor(AnalysisTable$Binary_Occupancy)
AnalysisTable$Factor_Time <-cut(AnalysisTable$Time, breaks = 4, right=FALSE, labels=c('Early Morning','Late Morning','Early Afternoon','Late Afternoon' ))
AnalysisTable$Course_Level <- factor(AnalysisTable$Course_Level)
smp_size <- floor(0.60 * nrow(AnalysisTable))
## set the seed to make your partition reproductible
set.seed(123)
#select the 60% of the dataset
train_ind <- sample(seq_len(nrow(AnalysisTable)), size = smp_size)
#creating the training set with the 60% of the observation selected before
train <-AnalysisTable[train_ind, ]
#creating the test set with rest of the obervation - 60%
test <- AnalysisTable[-train_ind, ]
Logitmodel.max <- glm(Binary_Percentage ~Max_clients + Room + Binned_Time + Course_Level ,family=binomial,data=train)
fitted.max <- predict(Logitmodel.max,test, type='response')
fitted.max <- ifelse(fitted.results > 0.5,'occupied','empty')
misClasificError.max <- mean(fitted.max != test$Binary_Percentage)
accuracy.max <- 1-misClasificError.max
Logitmodel.max <- glm(Binary_Percentage ~Max_clients + Room + Binned_Time + Course_Level ,family=binomial,data=train)
Logitmodel.max <- glm(Binary_occupancy ~Max_clients + Room + Binned_Time + Course_Level ,family=binomial,data=train)
Logitmodel.max <- glm(Binary_Occupancy ~WiFi_Max_clients + Room + Binned_Time + Course_Level ,family=binomial,data=train)
Logitmodel.max <- glm(Binary_Occupancy ~Wifi_Max_clients + Room + Binned_Time + Course_Level ,family=binomial,data=train)
Logitmodel.max <- glm(Binary_Occupancy ~Wifi_Max_clients + Room + Factor_Time + Course_Level ,family=binomial,data=train)
fitted.max <- predict(Logitmodel.max,test, type='response')
fitted.max <- ifelse(fitted.results > 0.5,'occupied','empty')
fitted.max <- ifelse(fitted.max > 0.5,'occupied','empty')
misClasificError.max <- mean(fitted.max != test$Binary_Percentage)
accuracy.max <- 1-misClasificError.max
accuracy.max
fitted.max <- ifelse(fitted.max > 0.5,'1','0')
misClasificError.max <- mean(fitted.max != test$Binary_Percentage)
accuracy.max <- 1-misClasificError.max
accuracy.max
fitted.max <- predict(Logitmodel.max,test, type='response')
View(train)
fitted.max <- ifelse(fitted.max > 0.5,'1','0')
misClasificError.max <- mean(fitted.max != test$Binary_Occupancy)
accuracy.max <- 1-misClasificError.max
accuracy.max
Logitmodel.avg <- glm(Binary_Occupancy ~Wifi_avg_clients + Room + Factor_Time + Course_Level ,family=binomial,data=train)
fitted.avg <- predict(Logitmodel.avg,test, type='response')
Logitmodel.avg <- glm(Binary_Occupancy ~Wifi_Average_clients + Room + Factor_Time + Course_Level ,family=binomial,data=train)
fitted.avg <- predict(Logitmodel.avg,test, type='response')
fitted.avg <- ifelse(fitted.avg > 0.5,'1','0')
misClasificError.avg <- mean(fitted.avg != test$Binary_Occupancy)
accuracy.avg <- 1-misClasificError.avg
accuracy.avg
Logitmodel.final <- glm(Binary_Occupancy ~Wifi_Average_clients + Room + Factor_Time + Course_Level ,family=binomial,data=AnalysisTable)
plot(Logitmodel.final)
install.packages("logisticdx")
install.packages("LogisticDx")
plot.glm(Logitmodel.final)
library(LogisticDx)
plot.glm(Logitmodel.final)
plot(Logitmodel.final)
plot(Logitmodel.final, y=0)
Logitmodel.final <- glm(Binary_Occupancy ~Wifi_Average_clients + Room + Factor_Time + Course_Level ,family=binomial,data=AnalysisTable)
plot(Logitmodel.final)
summary(Logitmodel.final)
plot(Logitmodel.final)
plot.glm(Logitmodel.final)
plot(Logitmodel.final, y=NULL)
plot(predict(Logitmodel.final),residuals(Logitmodel.final))
abline(h=0,lty=2,col="grey")
lines(lowess(predict(reg),residuals(Logitmodel.final)),col="black",lwd=2)
lines(lowess(predict(Logitmodel.final),residuals(Logitmodel.final)),col="black",lwd=2)
plot(predict(reg),residuals(Logitmodel.final),col=c("blue","orange")[1+Y])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1+Y])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1+Y])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1+Binary_Occupancy])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1+AnalysisTable$Binary_Occupancy])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1,AnalysisTable$Binary_Occupancy])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[1+(AnalysisTable$Binary_Occupancy)])
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange"))
plot(predict(Logitmodel.final),residuals(Logitmodel.final),col=c("blue","orange")[(AnalysisTable$Binary_Occupancy)])
abline(h=0,lty=2,col="grey")
lines(lowess(predict(Logitmodel.final),residuals(Logitmodel.final)),col="black",lwd=2)
rl=lm(residuals(Logitmodel.final)~bs(predict(Logitmodel.final),8))
rl=loess(residuals(Logitmodel.final)~predict(Logitmodel.final))
y=predict(rl,se=TRUE)
segments(predict(Logitmodel.final),y$fit+2*y$se.fit,predict(Logitmodel.final),y$fit-2*y$se.fit,col="green")
AnalysisTable <- read.csv("C:/Users/Cometa/Desktop/ResearchPracticum/repo/whothere/dataAnalysis/AnalysisTable.csv")
View(AnalysisTable)
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full <= 0] <- "0"
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full>0] <- "1"
AnalysisTable$Binary_Occupancy <- factor(AnalysisTable$Binary_Occupancy)
AnalysisTable$Factor_Time <-cut(AnalysisTable$Time, breaks = 4, right=FALSE, labels=c('Early Morning','Late Morning','Early Afternoon','Late Afternoon' ))
AnalysisTable$Room <- factor(AnalysisTable$Room)
AnalysisTable$Course_Level <- factor(AnalysisTable$Course_Level)
AnalysisTable$Tutorial <- factor(AnalysisTable$Tutorial)
AnalysisTable$Double_module <- factor(AnalysisTable$Double_module)
AnalysisTable$Class_went_ahead <- factor(AnalysisTable$Class_went_ahead)
NoOutlierTable <- AnalysisTable[ AnalysisTable$Wifi_Max_clients < 150,]
NoOutlierTable <- NoOutlierTable[ NoOutlierTable$Survey_counted_client < 120,]
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_clients  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_logs  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
CVbinary (Logitmodel1, nfolds= 10)
library(ggplot2) #package for making graphs
library(GGally)
library(nlme)
library(caret) # for splitting the database
library(DAAG)#for k-fold validation on linear and logistic
library(boot)#for k-fold validation on glm
library(plyr)
library(reshape2)
source("http://peterhaschke.com/Code/multiplot.R")
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full <= 0] <- "0"
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full>0] <- "1"
AnalysisTable$Binary_Occupancy <- factor(AnalysisTable$Binary_Occupancy)
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_logs  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
View(AnalysisTable)
summary(Logitmodel1)
Logitmodel2 <- glm(Binary_Occupancy ~Wifi_Average_clients + Factor_Time + Course_Level,family=binomial,data =AnalysisTable)
Logitmodel2 <- glm(Binary_Occupancy ~Wifi_Average_logs + Factor_Time + Course_Level,family=binomial,data =AnalysisTable)
View(NoOutlierTable)
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
AnalysisTable <-dbGetQuery(connection, query)
library(RMySQL) #package for communicate with MySQL database
library(ggplot2) #package for making graphs
library(GGally)
library(nlme)
library(caret) # for splitting the database
library(DAAG)#for k-fold validation on linear and logistic
library(boot)#for k-fold validation on glm
library(plyr)
library(reshape2)
source("http://peterhaschke.com/Code/multiplot.R")
connection <- dbConnect(MySQL(),user="root", password="",dbname="who_there_db", host="localhost")
query <-"SELECT W.`Room_Room_id` as Room, W.`Date`, HOUR( W.Time ) as Time, T.`Module_Module_code` as Module, M.`Course_Level`,T.`Tutorial`, T.`Double_module`, T.`Class_went_ahead`, R.`Capacity`, G.`Percentage_room_full`, AVG(W.`Associated_client_counts`) as Wifi_Average_clients, MAX(W.`Authenticated_client_counts`) as Wifi_Max_clients FROM Room R, Wifi_log W, Ground_truth_data G, Time_table T, Module M WHERE W.Room_Room_id = R.Room_id AND G.Room_Room_id = W.Room_Room_id AND W.Date = G.Date AND HOUR( W.Time ) = HOUR( G.Time ) AND HOUR( W.Time ) = HOUR( T.Time_period ) AND T.Date = W.Date AND T.Room_Room_id = W.Room_Room_id AND M.`Module_code` = T.`Module_Module_code` GROUP BY W.Room_Room_id, HOUR( W.Time ) , W.Date"
AnalysisTable <-dbGetQuery(connection, query)
NoOutlierTable <- AnalysisTable[ AnalysisTable$Wifi_Max_clients < 150,]
NoOutlierTable <- NoOutlierTable[ NoOutlierTable$Survey_counted_client < 120,]
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_clients  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full <= 0] <- "0"
AnalysisTable$Binary_Occupancy[AnalysisTable$Percentage_room_full>0] <- "1"
AnalysisTable$Binary_Occupancy <- factor(AnalysisTable$Binary_Occupancy)
AnalysisTable$Factor_Time <-cut(AnalysisTable$Time, breaks = 4, right=FALSE, labels=c('Early Morning','Late Morning','Early Afternoon','Late Afternoon' ))
AnalysisTable$Room <- factor(AnalysisTable$Room)
AnalysisTable$Course_Level <- factor(AnalysisTable$Course_Level)
AnalysisTable$Tutorial <- factor(AnalysisTable$Tutorial)
AnalysisTable$Double_module <- factor(AnalysisTable$Double_module)
AnalysisTable$Class_went_ahead <- factor(AnalysisTable$Class_went_ahead)
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_clients  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
View(NoOutlierTable)
NoOutlierTable <- AnalysisTable[ AnalysisTable$Wifi_Max_clients < 150,]
NoOutlierTable <- NoOutlierTable[ NoOutlierTable$Survey_counted_client < 120,]
NoOutlierTable <- AnalysisTable[ AnalysisTable$Wifi_Max_clients < 150,]
Logitmodel1 <- glm(Binary_Occupancy ~Wifi_Max_clients  + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
CVbinary (Logitmodel1, nfolds= 10)
Logitmodel2 <- glm(Binary_Occupancy ~Wifi_Average_clients + Factor_Time + Course_Level,family=binomial,data =NoOutlierTable)
CVbinary (Logitmodel2, nfolds= 10)
